// ThermalLC
// Generates synthetic thermal lightcurves of asteroids.
// Michael.Mueller@DLR.de
// 2007/07/09

#include "../TriangulatedConvex.h"
#include "../InertiaTimesCraterLagerros.h"
#include "../jansky.h"
#include "ParmfileLC.h"
#include<iostream>
#include<fstream>
#include<sstream>
using namespace std;



int main(int nargs, char* argsv[])
{
  try
    {
      if (nargs != 2)
	{
	  ostringstream dummy;
	  dummy<<"The name of a suitable parameter file must be given as the sole command line argument.\n"
	       <<"See also the documentation."<<ends;
	  throw logic_error(dummy.str());		
	}
      
      cerr<<"Reading in parameter file "<<argsv[1]<<":\n";
      ParmfileLC parms(argsv[1]);
      cerr<<"Done."<<endl;
      
      cerr<<"Opening shape file "<<parms.shapeName<<":\n";
      ConvexFile shape (parms.shapeName.c_str());
      cerr<<"Done.\n";
      
      const double lambdaMu = parms.lambdaMu;
      
      const double ecl_lambda = parms.axisLambda,
	ecl_beta   = parms.axisBeta,
	period_h   = parms.periodH,
	JD0        = parms.JD0,
	phi0       = parms.phi0, 
	
	H          = parms.H,
	G          = parms.G,
	pV         = parms.pV,
	emissivity = parms.emissivity,
	
	TI  = parms.TI,
	
	accuracyGoalCrater = parms.accuracyGoalCrater,
	accuracyGoalInertia = parms.accuracyGoalTI,
	
	gammaDeg = parms.gammaDeg,
	craterDensity = parms.craterDensity,
	
	zMax = parms.zMax;
      const unsigned int
	nTime = parms.nTime, 
	nZ = parms.nZ;
      const eclipticVector Earth2Aster(parms.ObsLambda, parms.ObsBeta, parms.deltaAU),
	Sun2Aster  (parms.SunLambda, parms.SunBeta, parms.rAU);
      const double JD = parms.JD;
      
      cerr<<"Generating asteroid model:\n";
      SpinState axis (ecl_lambda, ecl_beta, period_h, JD0, phi0);
      TriangulatedConvex aster(shape, axis, H, G, pV, emissivity);
      cerr<<"Done.\n";
      
      cerr<<"Initializing thermal model:\n";
      const double ThermalParameter = aster.calculateThermalParameter(TI, Sun2Aster.getLength());
      InertiaTimesCraterLagerros model(aster, ThermalParameter, nTime, nZ, zMax, 
				       accuracyGoalCrater, gammaDeg, craterDensity);
      model.setAccuracies(accuracyGoalInertia, accuracyGoalCrater);
      cerr<<"Done.\n";
      
      cerr<<"Opening output file "<<parms.outName<<":\n";
      ofstream out(parms.outName.c_str());
      if (!out)
        {
	  string dummy = "Fatal error: Couldn't open "+parms.outName+" for writing!\n";
	  throw runtime_error (dummy.c_str());
        };
      cerr<<"Done.\n";
      
      out<<"# Generated by ThermalLC.exe from parameter file "<<argsv[1]<<".\n";
      aster.ThermalLightCurve(out, Sun2Aster, Earth2Aster, lambdaMu, JD, model, nTime);
      
      return 0;
    }
  catch (exception& exc)
    {
      cerr<<"Critical exit, the following error has occurred:\n"
	  <<exc.what()<<endl;
      return -1;
    }
  catch (...)
    {
      cerr<<"Critical exit, a non-specified error has occurred! (?)"<<endl;
      return -2;
    };
};
